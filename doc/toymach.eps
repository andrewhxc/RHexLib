%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 92 690 300 712 
%%Creator: CorelDRAW 8
%%Title: D:\users\klavins\Pictures\rhexlib\toymach.eps
%%CreationDate: Mon Jul 16 14:29:43 2001
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
/AutoFlatness false def
/AutoSteps 0 def
/CMYKMarks true def
/UseLevel 1 def
%Color profile: Disabled
%%BeginResource: procset wCorel8Dict 8.0 0
/wCorel8Dict 300 dict def wCorel8Dict begin
% Copyright (c)1992-97 Corel Corporation
% All rights reserved.     v8.0 r0.7
/bd{bind def}bind def/ld{load def}bd/xd{exch def}bd/_ null def/rp{{pop}repeat}
bd/@cp/closepath ld/@gs/gsave ld/@gr/grestore ld/@np/newpath ld/Tl/translate ld
/$sv 0 def/@sv{/$sv save def}bd/@rs{$sv restore}bd/spg/showpage ld/showpage{}
bd currentscreen/@dsp xd/$dsp/@dsp def/$dsa xd/$dsf xd/$sdf false def/$SDF
false def/$Scra 0 def/SetScr/setscreen ld/setscreen{pop pop pop}bd/@ss{2 index
0 eq{$dsf 3 1 roll 4 -1 roll pop}if exch $Scra add exch load SetScr}bd
/SepMode_5 where{pop}{/SepMode_5 0 def}ifelse/CurrentInkName_5 where{pop}
{/CurrentInkName_5(Composite)def}ifelse/$ink_5 where{pop}{/$ink_5 -1 def}
ifelse/$c 0 def/$m 0 def/$y 0 def/$k 0 def/$t 1 def/$n _ def/$o 0 def/$fil 0
def/$C 0 def/$M 0 def/$Y 0 def/$K 0 def/$T 1 def/$N _ def/$O 0 def/$PF false
def/s1c 0 def/s1m 0 def/s1y 0 def/s1k 0 def/s1t 0 def/s1n _ def/$bkg false def
/SK 0 def/SM 0 def/SY 0 def/SC 0 def/$op false def matrix currentmatrix/$ctm xd
/$ptm matrix def/$ttm matrix def/$stm matrix def/$ffpnt true def
/CorelDrawReencodeVect[16#0/grave 16#5/breve 16#6/dotaccent 16#8/ring
16#A/hungarumlaut 16#B/ogonek 16#C/caron 16#D/dotlessi 16#27/quotesingle
16#60/grave 16#7C/bar
16#82/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl
16#88/circumflex/perthousand/Scaron/guilsinglleft/OE
16#91/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash
16#98/tilde/trademark/scaron/guilsinglright/oe 16#9F/Ydieresis
16#A1/exclamdown/cent/sterling/currency/yen/brokenbar/section
16#a8/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/minus/registered/macron
16#b0/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
16#b8/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
16#c0/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
16#c8/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
16#d0/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
16#d8/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
16#e0/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
16#e8/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
16#f0/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
16#f8/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/L2?/languagelevel where{pop languagelevel 2 ge}{false}ifelse def
/@BeginSysCorelDict{systemdict/Corel30Dict known{systemdict/Corel30Dict get
exec}if systemdict/CorelLexDict known{1 systemdict/CorelLexDict get exec}if}bd
/@EndSysCorelDict{systemdict/Corel30Dict known{end}if/EndCorelLexDict where
{pop EndCorelLexDict}if}bd AutoFlatness{/@ifl{dup currentflat exch sub 10 gt{
([Error: PathTooComplex; OffendingCommand: AnyPaintingOperator]\n)print flush
@np exit}{currentflat 2 add setflat}ifelse}bd/@fill/fill ld/fill{currentflat{
{@fill}stopped{@ifl}{exit}ifelse}bind loop setflat}bd/@eofill/eofill ld/eofill
{currentflat{{@eofill}stopped{@ifl}{exit}ifelse}bind loop setflat}bd/@clip
/clip ld/clip{currentflat{{@clip}stopped{@ifl}{exit}ifelse}bind loop setflat}
bd/@eoclip/eoclip ld/eoclip{currentflat{{@eoclip}stopped{@ifl}{exit}ifelse}
bind loop setflat}bd/@stroke/stroke ld/stroke{currentflat{{@stroke}stopped
{@ifl}{exit}ifelse}bind loop setflat}bd}if L2?{/@ssa{true setstrokeadjust}bd}{
/@ssa{}bd}ifelse/d/setdash ld/j/setlinejoin ld/J/setlinecap ld/M/setmiterlimit
ld/w/setlinewidth ld/O{/$o xd}bd/R{/$O xd}bd/W/eoclip ld/c/curveto ld/C/c ld/l
/lineto ld/L/l ld/rl/rlineto ld/m/moveto ld/n/newpath ld/N/newpath ld/P{11 rp}
bd/u{}bd/U{}bd/A{pop}bd/q/@gs ld/Q/@gr ld/&{}bd/@j{@sv @np}bd/@J{@rs}bd/g{1
exch sub/$k xd/$c 0 def/$m 0 def/$y 0 def/$t 1 def/$n _ def/$fil 0 def}bd/G{1
sub neg/$K xd _ 1 0 0 0/$C xd/$M xd/$Y xd/$T xd/$N xd}bd/k{1 index type
/stringtype eq{/$t xd/$n xd}{/$t 0 def/$n _ def}ifelse/$k xd/$y xd/$m xd/$c xd
/$fil 0 def}bd/K{1 index type/stringtype eq{/$T xd/$N xd}{/$T 0 def/$N _ def}
ifelse/$K xd/$Y xd/$M xd/$C xd}bd/x/k ld/X/K ld/sf{1 index type/stringtype eq{
/s1t xd/s1n xd}{/s1t 0 def/s1n _ def}ifelse/s1k xd/s1y xd/s1m xd/s1c xd}bd/i{
dup 0 ne{setflat}{pop}ifelse}bd/v{4 -2 roll 2 copy 6 -2 roll c}bd/V/v ld/y{2
copy c}bd/Y/y ld/@w{matrix rotate/$ptm xd matrix scale $ptm dup concatmatrix
/$ptm xd 1 eq{$ptm exch dup concatmatrix/$ptm xd}if 1 w}bd/@g{1 eq dup/$sdf xd
{/$scp xd/$sca xd/$scf xd}if}bd/@G{1 eq dup/$SDF xd{/$SCP xd/$SCA xd/$SCF xd}
if}bd/@D{2 index 0 eq{$dsf 3 1 roll 4 -1 roll pop}if 3 copy exch $Scra add exch
load SetScr/$dsp xd/$dsa xd/$dsf xd}bd/$ngx{$SDF{$SCF SepMode_5 0 eq{$SCA}
{$dsa}ifelse $SCP @ss}if}bd/p{/$pm xd 7 rp/$pyf xd/$pxf xd/$pn xd/$fil 1 def}
bd/@MN{2 copy le{pop}{exch pop}ifelse}bd/@MX{2 copy ge{pop}{exch pop}ifelse}bd
/InRange{3 -1 roll @MN @MX}bd/@sqr{dup 0 rl dup 0 exch rl neg 0 rl @cp}bd
/currentscale{1 0 dtransform matrix defaultmatrix idtransform dup mul exch dup
mul add sqrt 0 1 dtransform matrix defaultmatrix idtransform dup mul exch dup
mul add sqrt}bd/@unscale{}bd/wDstChck{2 1 roll dup 3 -1 roll eq{1 add}if}bd
/@dot{dup mul exch dup mul add 1 exch sub}bd/@lin{exch pop abs 1 exch sub}bd
/cmyk2rgb{3{dup 5 -1 roll add 1 exch sub dup 0 lt{pop 0}if exch}repeat pop}bd
/rgb2cmyk{3{1 exch sub 3 1 roll}repeat 3 copy @MN @MN 3{dup 5 -1 roll sub neg
exch}repeat}bd/rgb2g{2 index .299 mul 2 index .587 mul add 1 index .114 mul add
4 1 roll pop pop pop}bd/WaldoColor_5 where{pop}{/SetRgb/setrgbcolor ld/GetRgb
/currentrgbcolor ld/SetGry/setgray ld/GetGry/currentgray ld/SetRgb2 systemdict
/setrgbcolor get def/GetRgb2 systemdict/currentrgbcolor get def/SetHsb
systemdict/sethsbcolor get def/GetHsb systemdict/currenthsbcolor get def
/rgb2hsb{SetRgb2 GetHsb}bd/hsb2rgb{3 -1 roll dup floor sub 3 1 roll SetHsb
GetRgb2}bd/setcmykcolor where{pop/SetCmyk_5/setcmykcolor ld}{/SetCmyk_5{
cmyk2rgb SetRgb}bd}ifelse/currentcmykcolor where{pop/GetCmyk/currentcmykcolor
ld}{/GetCmyk{GetRgb rgb2cmyk}bd}ifelse/setoverprint where{pop}{/setoverprint{
/$op xd}bd}ifelse/currentoverprint where{pop}{/currentoverprint{$op}bd}ifelse
/@tc_5{5 -1 roll dup 1 ge{pop}{4{dup 6 -1 roll mul exch}repeat pop}ifelse}bd
/@trp{exch pop 5 1 roll @tc_5}bd/setprocesscolor_5{SepMode_5 0 eq{SetCmyk_5}{0
4 $ink_5 sub index exch pop 5 1 roll pop pop pop pop SepsColor true eq{$ink_5 3
gt{1 sub neg SetGry}{0 0 0 4 $ink_5 roll SetCmyk_5}ifelse}{1 sub neg SetGry}
ifelse}ifelse}bd/findcmykcustomcolor where{pop}{/findcmykcustomcolor{5 array
astore}bd}ifelse/setcustomcolor where{pop}{/setcustomcolor{exch aload pop
SepMode_5 0 eq{pop @tc_5 setprocesscolor_5}{CurrentInkName_5 eq{4 index}{0}
ifelse 6 1 roll 5 rp 1 sub neg SetGry}ifelse}bd}ifelse/@scc_5{dup type
/booleantype eq{setoverprint}{1 eq setoverprint}ifelse dup _ eq{pop
setprocesscolor_5 pop}{findcmykcustomcolor exch setcustomcolor}ifelse SepMode_5
0 eq{true}{GetGry 1 eq currentoverprint and not}ifelse}bd/colorimage where{pop
/ColorImage{colorimage}def}{/ColorImage{/ncolors xd pop/dataaq xd{dataaq
ncolors dup 3 eq{/$dat xd 0 1 $dat length 3 div 1 sub{dup 3 mul $dat 1 index
get 255 div $dat 2 index 1 add get 255 div $dat 3 index 2 add get 255 div rgb2g
255 mul cvi exch pop $dat 3 1 roll put}for $dat 0 $dat length 3 idiv
getinterval pop}{4 eq{/$dat xd 0 1 $dat length 4 div 1 sub{dup 4 mul $dat 1
index get 255 div $dat 2 index 1 add get 255 div $dat 3 index 2 add get 255 div
$dat 4 index 3 add get 255 div cmyk2rgb rgb2g 255 mul cvi exch pop $dat 3 1
roll put}for $dat 0 $dat length ncolors idiv getinterval}if}ifelse}image}bd
}ifelse/setcmykcolor{1 5 1 roll _ currentoverprint @scc_5/$ffpnt xd}bd
/currentcmykcolor{0 0 0 0}bd/setrgbcolor{rgb2cmyk setcmykcolor}bd
/currentrgbcolor{currentcmykcolor cmyk2rgb}bd/sethsbcolor{hsb2rgb setrgbcolor}
bd/currenthsbcolor{currentrgbcolor rgb2hsb}bd/setgray{dup dup setrgbcolor}bd
/currentgray{currentrgbcolor rgb2g}bd/InsideDCS false def/IMAGE systemdict
/image get def/image{InsideDCS{IMAGE}{/EPSDict where{pop SepMode_5 0 eq{IMAGE}
{dup type/dicttype eq{dup/ImageType get 1 ne{IMAGE}{dup dup/BitsPerComponent
get 8 eq exch/BitsPerComponent get 1 eq or currentcolorspace 0 get/DeviceGray
eq and{CurrentInkName_5(Black)eq{IMAGE}{dup/DataSource get/TCC xd/Height get
abs{TCC pop}repeat}ifelse}{IMAGE}ifelse}ifelse}{2 index 1 ne{CurrentInkName_5
(Black)eq{IMAGE}{/TCC xd pop pop exch pop abs{TCC pop}repeat}ifelse}{IMAGE}
ifelse}ifelse}ifelse}{IMAGE}ifelse}ifelse}bd}ifelse/WaldoColor_5 true def/@sft
{$tllx $pxf add dup $tllx gt{$pwid sub}if/$tx xd $tury $pyf sub dup $tury lt
{$phei add}if/$ty xd}bd/@stb{pathbbox/$ury xd/$urx xd/$lly xd/$llx xd}bd/@ep{{
cvx exec}forall}bd/@tp{@sv/$in true def 2 copy dup $lly le{/$in false def}if
$phei sub $ury ge{/$in false def}if dup $urx ge{/$in false def}if $pwid add
$llx le{/$in false def}if $in{@np 2 copy m $pwid 0 rl 0 $phei neg rl $pwid neg
0 rl 0 $phei rl clip @np $pn cvlit load aload pop 7 -1 roll 5 index sub 7 -1
roll 3 index sub Tl matrix currentmatrix/$ctm xd @ep pop pop pop pop}{pop pop
}ifelse @rs}bd/@th{@sft 0 1 $tly 1 sub{dup $psx mul $tx add{dup $llx gt{$pwid
sub}{exit}ifelse}loop exch $phei mul $ty exch sub 0 1 $tlx 1 sub{$pwid mul 3
copy 3 -1 roll add exch @tp pop}for pop pop}for}bd/@tv{@sft 0 1 $tlx 1 sub{dup
$pwid mul $tx add exch $psy mul $ty exch sub{dup $ury lt{$phei add}{exit}
ifelse}loop 0 1 $tly 1 sub{$phei mul 3 copy sub @tp pop}for pop pop}for}bd/$fm
0 def/wfill{1 $fm eq{fill}{eofill}ifelse}bd/wclip{1 $fm eq{clip}{eoclip}ifelse
}bd/@pf{@gs $ctm setmatrix $pm concat @stb wclip @sv Bburx Bbury $pm itransform
/$tury xd/$turx xd Bbllx Bblly $pm itransform/$tlly xd/$tllx xd newpath $tllx
$tlly m $tllx $tury l $turx $tury l $turx $tlly l $tllx $tlly m @cp pathbbox
@rs/$tury xd/$turx xd/$tlly xd/$tllx xd/$wid $turx $tllx sub def/$hei $tury
$tlly sub def @gs $vectpat{1 0 0 0 0 _ $o @scc_5{wfill}if}{$t $c $m $y $k $n $o
@scc_5{SepMode_5 0 eq $pfrg or{$tllx $tlly Tl $wid $hei scale <00> 8 1 false[8
0 0 1 0 0]{}imagemask}{/$bkg true def}ifelse}if}ifelse @gr $wid 0 gt $hei 0 gt
and{$pn cvlit load aload pop/$pd xd 3 -1 roll sub/$phei xd exch sub/$pwid xd
$wid $pwid div ceiling 1 add/$tlx xd $hei $phei div ceiling 1 add/$tly xd $psx
0 eq{@tv}{@th}ifelse}if @gr @np/$bkg false def}bd/@Pf{@sv SepMode_5 0 eq $Psc 0
ne or $ink_5 3 eq or{0 J 0 j[]0 d $t $c $m $y $k $n $o @scc_5 pop $ctm
setmatrix 72 1000 div dup matrix scale dup concat dup Bburx exch Bbury exch
itransform ceiling cvi/Bbury xd ceiling cvi/Bburx xd Bbllx exch Bblly exch
itransform floor cvi/Bblly xd floor cvi/Bbllx xd $Prm aload pop $Psn load exec
}{1 SetGry wfill}ifelse @rs @np}bd/F{matrix currentmatrix $sdf{$scf $sca $scp
@ss}if $fil 1 eq{@pf}{$fil 2 eq{@ff}{$fil 3 eq{@Pf}{$t $c $m $y $k $n $o @scc_5
{wfill}{@np}ifelse}ifelse}ifelse}ifelse $sdf{$dsf $dsa $dsp @ss}if setmatrix}
bd/f{@cp F}bd/S{matrix currentmatrix $ctm setmatrix $SDF{$SCF $SCA $SCP @ss}if
$T $C $M $Y $K $N $O @scc_5{matrix currentmatrix $ptm concat stroke setmatrix}
{@np}ifelse $SDF{$dsf $dsa $dsp @ss}if setmatrix}bd/s{@cp S}bd/B{@gs F @gr S}
bd/b{@cp B}bd/_E{5 array astore exch cvlit xd}bd/@cc{currentfile $dat
readhexstring pop}bd/@sm{/$ctm $ctm currentmatrix def}bd/@E{/Bbury xd/Bburx xd
/Bblly xd/Bbllx xd}bd/@c{@cp}bd/@p{/$fil 1 def 1 eq dup/$vectpat xd{/$pfrg true
def}{@gs $t $c $m $y $k $n $o @scc_5/$pfrg xd @gr}ifelse/$pm xd/$psy xd/$psx xd
/$pyf xd/$pxf xd/$pn xd}bd/@P{/$fil 3 def/$Psn xd/$Psc xd array astore/$Prm xd
}bd/@ii{concat 3 index 3 index m 3 index 1 index l 2 copy l 1 index 3 index l 3
index 3 index l clip pop pop pop pop}bd/tcc{@cc}def/@i{@sm @gs @ii 6 index 1 ne
{/$frg true def pop pop}{1 eq{s1t s1c s1m s1y s1k s1n $O @scc_5/$frg xd}{/$frg
false def}ifelse 1 eq{@gs $ctm setmatrix F @gr}if}ifelse @np/$ury xd/$urx xd
/$lly xd/$llx xd/$bts xd/$hei xd/$wid xd/$dat $wid $bts mul 8 div ceiling cvi
string def $bkg $frg or{$SDF{$SCF $SCA $SCP @ss}if $llx $lly Tl $urx $llx sub
$ury $lly sub scale $bkg{$t $c $m $y $k $n $o @scc_5 pop}if $wid $hei abs $bts
1 eq{$bkg}{$bts}ifelse[$wid 0 0 $hei neg 0 $hei 0 gt{$hei}{0}ifelse]/tcc load
$bts 1 eq{imagemask}{image}ifelse $SDF{$dsf $dsa $dsp @ss}if}{$hei abs{tcc pop}
repeat}ifelse @gr $ctm setmatrix}bd/@I{@sm @gs @ii @np/$ury xd/$urx xd/$lly xd
/$llx xd/$ncl xd/$bts xd/$hei xd/$wid xd/$dat $wid $bts mul $ncl mul 8 div
ceiling cvi string def $ngx $llx $lly Tl $urx $llx sub $ury $lly sub scale $wid
$hei abs $bts[$wid 0 0 $hei neg 0 $hei 0 gt{$hei}{0}ifelse]/@cc load false $ncl
ColorImage $SDF{$dsf $dsa $dsp @ss}if @gr $ctm setmatrix}bd/COMP 0 def
/MaskedImage false def L2?{/@I_2{@sm @gs @ii @np/$ury xd/$urx xd/$lly xd/$llx
xd/$ncl xd/$bts xd/$hei xd/$wid xd/$dat $wid $bts mul $ncl mul 8 div ceiling
cvi string def $ngx $ncl 1 eq{/DeviceGray}{$ncl 3 eq{/DeviceRGB}{/DeviceCMYK}
ifelse}ifelse setcolorspace $llx $lly Tl $urx $llx sub $ury $lly sub scale 8
dict begin/ImageType 1 def/Width $wid def/Height $hei abs def/BitsPerComponent
$bts def/Decode $ncl 1 eq{[0 1]}{$ncl 3 eq{[0 1 0 1 0 1]}{[0 1 0 1 0 1 0 1]}
ifelse}ifelse def/ImageMatrix[$wid 0 0 $hei neg 0 $hei 0 gt{$hei}{0}ifelse]def
/DataSource currentfile/ASCII85Decode filter COMP 1 eq{/DCTDecode filter}{COMP
2 eq{/RunLengthDecode filter}if}ifelse def currentdict end image $SDF{$dsf $dsa
$dsp @ss}if @gr $ctm setmatrix}bd}{/@I_2{}bd}ifelse/@I_3{@sm @gs @ii @np/$ury
xd/$urx xd/$lly xd/$llx xd/$ncl xd/$bts xd/$hei xd/$wid xd/$dat $wid $bts mul
$ncl mul 8 div ceiling cvi string def $ngx $ncl 1 eq{/DeviceGray}{$ncl 3 eq
{/DeviceRGB}{/DeviceCMYK}ifelse}ifelse setcolorspace $llx $lly Tl $urx $llx sub
$ury $lly sub scale/ImageDataDict 8 dict def ImageDataDict begin/ImageType 1
def/Width $wid def/Height $hei abs def/BitsPerComponent $bts def/Decode $ncl 1
eq{[0 1]}{$ncl 3 eq{[0 1 0 1 0 1]}{[0 1 0 1 0 1 0 1]}ifelse}ifelse def
/ImageMatrix[$wid 0 0 $hei neg 0 $hei 0 gt{$hei}{0}ifelse]def/DataSource
currentfile/ASCII85Decode filter COMP 1 eq{/DCTDecode filter}{COMP 2 eq{
/RunLengthDecode filter}if}ifelse def end/MaskedImageDict 7 dict def
MaskedImageDict begin/ImageType 3 def/InterleaveType 3 def/MaskDict
ImageMaskDict def/DataDict ImageDataDict def end MaskedImageDict image $SDF
{$dsf $dsa $dsp @ss}if @gr $ctm setmatrix}bd/@SetMask{/$mbts xd/$mhei xd/$mwid
xd/ImageMaskDict 8 dict def ImageMaskDict begin/ImageType 1 def/Width $mwid def
/Height $mhei abs def/BitsPerComponent $mbts def/DataSource maskstream def
/ImageMatrix[$mwid 0 0 $mhei neg 0 $mhei 0 gt{$mhei}{0}ifelse]def/Decode[1 0]
def end}bd/@B{@gs S @gr F}bd/@b{@cp @B}bd/@sep{CurrentInkName_5(Composite)eq
{/$ink_5 -1 def}{CurrentInkName_5(Cyan)eq{/$ink_5 0 def}{CurrentInkName_5
(Magenta)eq{/$ink_5 1 def}{CurrentInkName_5(Yellow)eq{/$ink_5 2 def}{
CurrentInkName_5(Black)eq{/$ink_5 3 def}{/$ink_5 4 def}ifelse}ifelse}ifelse}
ifelse}ifelse}bd/@whi{@gs -72000 dup m -72000 72000 l 72000 dup l 72000 -72000
l @cp 1 SetGry fill @gr}bd/@neg{[{1 exch sub}/exec cvx currenttransfer/exec
cvx]cvx settransfer @whi}bd/deflevel 0 def/@sax{/deflevel deflevel 1 add def}
bd/@eax{/deflevel deflevel dup 0 gt{1 sub}if def deflevel 0 gt{/eax load}{eax}
ifelse}bd/eax{{exec}forall}bd/@rax{deflevel 0 eq{@rs @sv}if}bd/@daq{dup type
/arraytype eq{{}forall}if}bd/@BMP{/@cc xd UseLevel 3 eq MaskedImage true eq and
{7 -2 roll pop pop @I_3}{12 index 1 gt UseLevel 2 eq UseLevel 3 eq or and{7 -2
roll pop pop @I_2}{11 index 1 eq{12 -1 roll pop @i}{7 -2 roll pop pop @I}
ifelse}ifelse}ifelse}bd systemdict/pdfmark known not{/pdfmark/cleartomark ld}
if
/z{exch findfont exch scalefont setfont}bd/ZB{9 dict dup begin 4 1 roll
/FontType 3 def/FontMatrix xd/FontBBox xd/Encoding 256 array def 0 1 255{
Encoding exch/.notdef put}for/CharStrings 256 dict def CharStrings/.notdef{}
put/Metrics 256 dict def Metrics/.notdef 3 -1 roll put/BuildChar{exch dup
/$char exch/Encoding get 3 index get def dup/Metrics get $char get aload pop
setcachedevice begin Encoding exch get CharStrings exch get end exec}def end
definefont pop}bd/ZBAddChar{findfont begin dup 4 1 roll dup 6 1 roll Encoding 3
1 roll put CharStrings 3 1 roll put Metrics 3 1 roll put end}bd/Z{findfont dup
maxlength 2 add dict exch dup{1 index/FID ne{3 index 3 1 roll put}{pop pop}
ifelse}forall pop dup dup/Encoding get 256 array copy dup/$fe xd/Encoding exch
put dup/Fontname 3 index put 3 -1 roll dup length 0 ne{0 exch{dup type 0 type
eq{exch pop}{$fe exch 2 index exch put 1 add}ifelse}forall pop}if dup 256 dict
dup/$met xd/Metrics exch put dup/FontMatrix get 0 get 1000 mul 1 exch div 3
index length 256 eq{0 1 255{dup $fe exch get dup/.notdef eq{pop pop}{5 index 3
-1 roll get 2 index mul $met 3 1 roll put}ifelse}for}if pop definefont pop pop
}bd/@ftx{{currentpoint 3 -1 roll(0)dup 3 -1 roll 0 exch put dup @gs true
charpath $ctm setmatrix @@txt @gr @np stringwidth pop 3 -1 roll add exch m}
forall}bd/@ft{matrix currentmatrix exch $sdf{$scf $sca $scp @ss}if $fil 1 eq
{/@@txt/@pf ld @ftx}{$fil 2 eq{/@@txt/@ff ld @ftx}{$fil 3 eq{/@@txt/@Pf ld
@ftx}{$t $c $m $y $k $n $o @scc_5{show}{pop}ifelse}ifelse}ifelse}ifelse $sdf
{$dsf $dsa $dsp @ss}if setmatrix}bd/@st{matrix currentmatrix exch $SDF{$SCF
$SCA $SCP @ss}if $T $C $M $Y $K $N $O @scc_5{{currentpoint 3 -1 roll(0)dup 3 -1
roll 0 exch put dup @gs true charpath $ctm setmatrix $ptm concat stroke @gr @np
stringwidth pop 3 -1 roll add exch m}forall}{pop}ifelse $SDF{$dsf $dsa $dsp
@ss}if setmatrix}bd/@te{@ft}bd/@tr{@st}bd/@ta{dup @gs @ft @gr @st}bd/@t@a{dup
@gs @st @gr @ft}bd/@tm{@sm concat}bd/e{/t{@te}def}bd/r{/t{@tr}def}bd/o{/t{pop}
def}bd/a{/t{@ta}def}bd/@a{/t{@t@a}def}bd/t{@te}def/T{@np $ctm setmatrix/$ttm
matrix def}bd/ddt{t}def/@t{/$stm $stm currentmatrix def 3 1 roll m $ttm concat
ddt $stm setmatrix}bd/@n{/$ttm exch matrix rotate def}bd/@s{}bd/@l{}bd
end
%%EndResource
%%EndProlog
%%BeginSetup
wCorel8Dict begin
@BeginSysCorelDict
2.6131 setmiterlimit
1.00 setflat
/$fst 128 def
%%EndSetup

%%Page: 1 1
%LogicalPage: 1
%%BeginPageSetup
@sv
@sm
@sv
%%EndPageSetup
@rax 112.15559 696.30718 153.13578 703.71043 @E
[0.00028346 0.00000000 0.00000000 0.00028346 112.15558645 696.45880917] @tm
 0 O 0 @g
0.00 0.00 0.00 1.00 k
e

% FontChange:/_AvantGardeBkBT 35278.00000 z
%CHAR: 0 0 (s) @t
741 5962 m
3240 5962 L
3240 5891 l
3240 4710 3581 3734 4257 2957 c
4933 2181 5774 1793 6773 1793 c
7726 1793 8514 2093 9149 2687 c
9778 3287 10095 4039 10095 4945 c
10095 5850 9848 6579 9349 7132 c
8849 7685 7943 8202 6632 8684 c
4533 9431 3157 10195 2516 10971 c
1876 11753 1552 12800 1552 14111 c
1552 15593 2087 16851 3163 17880 c
4233 18915 5539 19432 7061 19432 c
8684 19432 9966 18974 10919 18056 c
11871 17133 12383 15852 12453 14211 C
9854 14211 L
9796 15111 9513 15805 9002 16298 c
8490 16792 7791 17039 6909 17039 c
6115 17039 5456 16775 4927 16240 c
4398 15705 4133 15040 4133 14246 c
4133 13682 4245 13212 4463 12824 c
4680 12441 5039 12094 5545 11783 c
6003 11495 6673 11218 7555 10954 c
8431 10689 9019 10495 9319 10372 c
10501 9866 11371 9196 11930 8355 c
12488 7514 12765 6450 12765 5151 c
12765 3522 12194 2170 11060 1099 c
9925 35 8478 -500 6738 -500 c
4957 -500 3528 82 2446 1246 c
1364 2417 800 3986 741 5962 C
@c
F
%CHAR: 13723 0 (t) @t
17321 0 m
17321 16504 L
13723 16504 L
13723 18950 L
17321 18950 L
17321 25083 L
19750 25083 L
19750 18950 L
23348 18950 L
23348 16504 L
19750 16504 L
19750 0 L
17321 0 L
@c
F
%CHAR: 23354 0 (a) @t
41305 9596 m
41305 11606 40587 13359 39153 14858 c
37718 16357 36060 17104 34190 17104 c
32156 17104 30427 16357 28998 14858 c
27570 13359 26852 11501 26852 9284 c
26852 7173 27564 5392 28987 3939 c
30410 2487 32121 1758 34120 1758 c
36048 1758 37730 2522 39159 4057 c
40587 5592 41305 7438 41305 9596 c
@c
41305 2999 m
40546 1905 39523 1052 38230 429 c
36936 -188 35543 -500 34049 -500 c
31274 -500 28957 453 27111 2352 c
25259 4251 24336 6597 24336 9390 c
24336 12224 25283 14593 27170 16504 c
29057 18409 31421 19362 34261 19362 c
35719 19362 37054 19068 38271 18474 c
39488 17880 40499 17028 41305 15916 C
41305 18950 L
43680 18950 L
43680 0 L
41305 0 L
41305 2999 L
@c
F
%CHAR: 45579 0 (t) @t
49177 0 m
49177 16504 L
45579 16504 L
45579 18950 L
49177 18950 L
49177 25083 L
51606 25083 L
51606 18950 L
55204 18950 L
55204 16504 L
51606 16504 L
51606 0 L
49177 0 L
@c
F
%CHAR: 55210 0 (e) @t
75742 8702 m
58638 8702 L
58785 6638 59532 4974 60878 3698 c
62219 2428 63894 1793 65905 1793 c
67328 1793 68610 2164 69745 2899 c
70879 3640 71761 4663 72379 5980 C
75136 5980 L
74266 3881 73037 2275 71461 1152 c
69880 29 68051 -535 65976 -535 c
63218 -535 60884 447 58979 2411 c
57074 4374 56121 6738 56121 9490 c
56121 12377 57056 14758 58920 16639 c
60784 18527 63171 19468 66076 19468 c
68927 19468 71250 18486 73043 16528 c
74842 14564 75742 12012 75742 8872 c
75742 8702 L
@c
73055 10754 m
72596 12882 71750 14487 70521 15563 c
69292 16639 67693 17175 65717 17175 c
63883 17175 62324 16598 61049 15440 c
59773 14282 58997 12724 58708 10754 C
73055 10754 L
@c
F
%CHAR: 76588 0 (O) @t
80222 12659 m
80222 9607 81215 7044 83203 4974 c
85190 2910 87642 1876 90558 1876 c
93404 1876 95809 2922 97772 5009 c
99736 7103 100718 9678 100718 12729 c
100718 15581 99707 18033 97684 20097 c
95668 22160 93233 23189 90382 23189 c
89223 23189 88106 22989 87036 22596 c
85960 22196 84972 21614 84061 20843 c
82867 19838 81927 18603 81245 17139 c
80563 15681 80222 14188 80222 12659 c
@c
77640 12694 m
77640 14440 77976 16110 78646 17692 c
79322 19279 80292 20696 81568 21949 c
82797 23154 84149 24060 85625 24671 c
87101 25277 88700 25582 90423 25582 c
92175 25582 93804 25277 95303 24659 c
96802 24048 98172 23131 99413 21914 c
100689 20661 101647 19262 102288 17710 c
102929 16157 103252 14487 103252 12694 c
103252 10919 102976 9284 102423 7796 c
101876 6309 101047 4957 99948 3739 c
98672 2334 97232 1282 95620 570 c
94015 -141 92269 -500 90388 -500 c
86783 -500 83755 764 81309 3298 c
78863 5833 77640 8966 77640 12694 c
@c
F
%CHAR: 104352 0 (n) @t
106298 18950 m
108656 18950 L
108656 16792 L
109403 17657 110267 18292 111249 18703 c
112231 19121 113354 19326 114618 19326 c
116005 19326 117240 19068 118328 18550 c
119416 18033 120274 17292 120903 16328 c
121338 15652 121650 14858 121844 13941 c
122032 13029 122126 11683 122126 9901 c
122126 0 L
119733 0 L
119733 10607 l
119733 12847 119304 14470 118451 15481 c
117593 16492 116223 16998 114342 16998 c
113236 16998 112272 16775 111437 16334 c
110608 15893 109949 15258 109467 14435 c
109167 13917 108956 13329 108838 12665 c
108715 12006 108656 10854 108656 9213 c
108656 0 L
106298 0 L
106298 18950 L
@c
F
%CHAR: 124037 0 (e) @t
144569 8702 m
127465 8702 L
127612 6638 128359 4974 129705 3698 c
131046 2428 132721 1793 134732 1793 c
136155 1793 137437 2164 138572 2899 c
139706 3640 140588 4663 141206 5980 C
143963 5980 L
143093 3881 141864 2275 140288 1152 c
138707 29 136878 -535 134803 -535 c
132045 -535 129711 447 127806 2411 c
125901 4374 124948 6738 124948 9490 c
124948 12377 125883 14758 127747 16639 c
129611 18527 131998 19468 134903 19468 c
137754 19468 140077 18486 141870 16528 c
143669 14564 144569 12012 144569 8872 c
144569 8702 L
@c
141882 10754 m
141423 12882 140577 14487 139348 15563 c
138119 16639 136520 17175 134544 17175 c
132710 17175 131151 16598 129876 15440 c
128600 14282 127824 12724 127535 10754 C
141882 10754 L
@c
F
T
@rax 256.32737 696.37776 294.21751 703.63956 @E
[0.00028346 0.00000000 0.00000000 0.00028346 256.32736070 696.52939184] @tm
 0 O 0 @g
0.00 0.00 0.00 1.00 k
e

% FontChange:/_AvantGardeBkBT 35278.00000 z
%CHAR: 0 0 (s) @t
741 5962 m
3240 5962 L
3240 5891 l
3240 4710 3581 3734 4257 2957 c
4933 2181 5774 1793 6773 1793 c
7726 1793 8514 2093 9149 2687 c
9778 3287 10095 4039 10095 4945 c
10095 5850 9848 6579 9349 7132 c
8849 7685 7943 8202 6632 8684 c
4533 9431 3157 10195 2516 10971 c
1876 11753 1552 12800 1552 14111 c
1552 15593 2087 16851 3163 17880 c
4233 18915 5539 19432 7061 19432 c
8684 19432 9966 18974 10919 18056 c
11871 17133 12383 15852 12453 14211 C
9854 14211 L
9796 15111 9513 15805 9002 16298 c
8490 16792 7791 17039 6909 17039 c
6115 17039 5456 16775 4927 16240 c
4398 15705 4133 15040 4133 14246 c
4133 13682 4245 13212 4463 12824 c
4680 12441 5039 12094 5545 11783 c
6003 11495 6673 11218 7555 10954 c
8431 10689 9019 10495 9319 10372 c
10501 9866 11371 9196 11930 8355 c
12488 7514 12765 6450 12765 5151 c
12765 3522 12194 2170 11060 1099 c
9925 35 8478 -500 6738 -500 c
4957 -500 3528 82 2446 1246 c
1364 2417 800 3986 741 5962 C
@c
F
%CHAR: 13723 0 (t) @t
17321 0 m
17321 16504 L
13723 16504 L
13723 18950 L
17321 18950 L
17321 25083 L
19750 25083 L
19750 18950 L
23348 18950 L
23348 16504 L
19750 16504 L
19750 0 L
17321 0 L
@c
F
%CHAR: 23354 0 (a) @t
41305 9596 m
41305 11606 40587 13359 39153 14858 c
37718 16357 36060 17104 34190 17104 c
32156 17104 30427 16357 28998 14858 c
27570 13359 26852 11501 26852 9284 c
26852 7173 27564 5392 28987 3939 c
30410 2487 32121 1758 34120 1758 c
36048 1758 37730 2522 39159 4057 c
40587 5592 41305 7438 41305 9596 c
@c
41305 2999 m
40546 1905 39523 1052 38230 429 c
36936 -188 35543 -500 34049 -500 c
31274 -500 28957 453 27111 2352 c
25259 4251 24336 6597 24336 9390 c
24336 12224 25283 14593 27170 16504 c
29057 18409 31421 19362 34261 19362 c
35719 19362 37054 19068 38271 18474 c
39488 17880 40499 17028 41305 15916 C
41305 18950 L
43680 18950 L
43680 0 L
41305 0 L
41305 2999 L
@c
F
%CHAR: 45579 0 (t) @t
49177 0 m
49177 16504 L
45579 16504 L
45579 18950 L
49177 18950 L
49177 25083 L
51606 25083 L
51606 18950 L
55204 18950 L
55204 16504 L
51606 16504 L
51606 0 L
49177 0 L
@c
F
%CHAR: 55210 0 (e) @t
75742 8702 m
58638 8702 L
58785 6638 59532 4974 60878 3698 c
62219 2428 63894 1793 65905 1793 c
67328 1793 68610 2164 69745 2899 c
70879 3640 71761 4663 72379 5980 C
75136 5980 L
74266 3881 73037 2275 71461 1152 c
69880 29 68051 -535 65976 -535 c
63218 -535 60884 447 58979 2411 c
57074 4374 56121 6738 56121 9490 c
56121 12377 57056 14758 58920 16639 c
60784 18527 63171 19468 66076 19468 c
68927 19468 71250 18486 73043 16528 c
74842 14564 75742 12012 75742 8872 c
75742 8702 L
@c
73055 10754 m
72596 12882 71750 14487 70521 15563 c
69292 16639 67693 17175 65717 17175 c
63883 17175 62324 16598 61049 15440 c
59773 14282 58997 12724 58708 10754 C
73055 10754 L
@c
F
%CHAR: 76588 0 (T) @t
84273 0 m
81809 0 L
81809 22619 L
76794 22619 L
76794 25083 L
89288 25083 L
89288 22619 L
84273 22619 L
84273 0 L
@c
F
%CHAR: 88724 0 (w) @t
106228 4757 m
110808 18950 L
113389 18950 L
107004 0 L
105416 0 L
100971 14435 L
96591 0 L
95003 0 L
88618 18950 L
91152 18950 L
95780 4757 L
100125 18950 L
101883 18950 L
106228 4757 L
@c
F
%CHAR: 113207 0 (o) @t
116670 9496 m
116670 7308 117364 5480 118752 4004 c
120145 2528 121868 1793 123937 1793 c
125966 1793 127671 2528 129053 4004 c
130429 5480 131116 7320 131116 9525 c
131116 11765 130417 13606 129023 15046 c
127630 16487 125860 17210 123714 17210 c
121785 17210 120127 16469 118746 14987 c
117364 13506 116670 11677 116670 9496 c
@c
114118 9455 m
114118 12236 115071 14611 116976 16587 c
118881 18562 121139 19550 123749 19550 c
126489 19550 128829 18580 130764 16639 c
132698 14699 133668 12383 133668 9696 c
133668 6873 132722 4463 130828 2464 c
128929 464 126636 -535 123937 -535 c
121192 -535 118869 447 116970 2405 c
115071 4363 114118 6709 114118 9455 c
@c
F
T
@rax 178.76353 704.42391 223.23373 711.82715 @E
[0.00028346 0.00000000 0.00000000 0.00028346 178.76352102 704.57553328] @tm
 0 O 0 @g
0.00 0.00 0.00 1.00 k
e

% FontChange:/_AvantGardeBkBT 35278.00000 z
%CHAR: 0 0 (e) @t
20532 8702 m
3428 8702 L
3575 6638 4322 4974 5668 3698 c
7009 2428 8684 1793 10695 1793 c
12118 1793 13400 2164 14535 2899 c
15669 3640 16551 4663 17169 5980 C
19926 5980 L
19056 3881 17827 2275 16251 1152 c
14670 29 12841 -535 10766 -535 c
8008 -535 5674 447 3769 2411 c
1864 4374 911 6738 911 9490 c
911 12377 1846 14758 3710 16639 c
5574 18527 7961 19468 10866 19468 c
13717 19468 16040 18486 17833 16528 c
19632 14564 20532 12012 20532 8872 c
20532 8702 L
@c
17845 10754 m
17386 12882 16540 14487 15311 15563 c
14082 16639 12483 17175 10507 17175 c
8673 17175 7114 16598 5839 15440 c
4563 14282 3787 12724 3498 10754 C
17845 10754 L
@c
F
%CHAR: 21378 0 (v) @t
30733 0 m
28510 0 L
21102 18950 L
23671 18950 L
29733 3669 L
35848 18950 L
38482 18950 L
30733 0 L
@c
F
%CHAR: 38206 0 (e) @t
58738 8702 m
41634 8702 L
41781 6638 42528 4974 43874 3698 c
45215 2428 46890 1793 48901 1793 c
50324 1793 51606 2164 52741 2899 c
53875 3640 54757 4663 55375 5980 C
58132 5980 L
57262 3881 56033 2275 54457 1152 c
52876 29 51047 -535 48972 -535 c
46214 -535 43880 447 41975 2411 c
40070 4374 39117 6738 39117 9490 c
39117 12377 40052 14758 41916 16639 c
43780 18527 46167 19468 49072 19468 c
51923 19468 54246 18486 56039 16528 c
57838 14564 58738 12012 58738 8872 c
58738 8702 L
@c
56051 10754 m
55592 12882 54746 14487 53517 15563 c
52288 16639 50689 17175 48713 17175 c
46879 17175 45320 16598 44045 15440 c
42769 14282 41993 12724 41704 10754 C
56051 10754 L
@c
F
%CHAR: 59584 0 (n) @t
61530 18950 m
63888 18950 L
63888 16792 L
64635 17657 65499 18292 66481 18703 c
67463 19121 68586 19326 69850 19326 c
71237 19326 72472 19068 73560 18550 c
74648 18033 75506 17292 76135 16328 c
76570 15652 76882 14858 77076 13941 c
77264 13029 77358 11683 77358 9901 c
77358 0 L
74965 0 L
74965 10607 l
74965 12847 74536 14470 73683 15481 c
72825 16492 71455 16998 69574 16998 c
68468 16998 67504 16775 66669 16334 c
65840 15893 65181 15258 64699 14435 c
64399 13917 64188 13329 64070 12665 c
63947 12006 63888 10854 63888 9213 c
63888 0 L
61530 0 L
61530 18950 L
@c
F
%CHAR: 79269 0 (t) @t
82867 0 m
82867 16504 L
79269 16504 L
79269 18950 L
82867 18950 L
82867 25083 L
85296 25083 L
85296 18950 L
88894 18950 L
88894 16504 L
85296 16504 L
85296 0 L
82867 0 L
@c
F
%CHAR: 88900 0 (O) @t
92534 12659 m
92534 9607 93527 7044 95515 4974 c
97502 2910 99954 1876 102870 1876 c
105716 1876 108121 2922 110084 5009 c
112048 7103 113030 9678 113030 12729 c
113030 15581 112019 18033 109996 20097 c
107980 22160 105545 23189 102694 23189 c
101535 23189 100418 22989 99348 22596 c
98272 22196 97284 21614 96373 20843 c
95179 19838 94239 18603 93557 17139 c
92875 15681 92534 14188 92534 12659 c
@c
89952 12694 m
89952 14440 90288 16110 90958 17692 c
91634 19279 92604 20696 93880 21949 c
95109 23154 96461 24060 97937 24671 c
99413 25277 101012 25582 102735 25582 c
104487 25582 106116 25277 107615 24659 c
109114 24048 110484 23131 111725 21914 c
113001 20661 113959 19262 114600 17710 c
115241 16157 115564 14487 115564 12694 c
115564 10919 115288 9284 114735 7796 c
114188 6309 113359 4957 112260 3739 c
110984 2334 109544 1282 107932 570 c
106327 -141 104581 -500 102700 -500 c
99095 -500 96067 764 93621 3298 c
91175 5833 89952 8966 89952 12694 c
@c
F
%CHAR: 116664 0 (n) @t
118610 18950 m
120968 18950 L
120968 16792 L
121715 17657 122579 18292 123561 18703 c
124543 19121 125666 19326 126930 19326 c
128317 19326 129552 19068 130640 18550 c
131728 18033 132586 17292 133215 16328 c
133650 15652 133962 14858 134156 13941 c
134344 13029 134438 11683 134438 9901 c
134438 0 L
132045 0 L
132045 10607 l
132045 12847 131616 14470 130763 15481 c
129905 16492 128535 16998 126654 16998 c
125548 16998 124584 16775 123749 16334 c
122920 15893 122261 15258 121779 14435 c
121479 13917 121268 13329 121150 12665 c
121027 12006 120968 10854 120968 9213 c
120968 0 L
118610 0 L
118610 18950 L
@c
F
%CHAR: 136349 0 (e) @t
156881 8702 m
139777 8702 L
139924 6638 140671 4974 142017 3698 c
143358 2428 145033 1793 147044 1793 c
148467 1793 149749 2164 150884 2899 c
152018 3640 152900 4663 153518 5980 C
156275 5980 L
155405 3881 154176 2275 152600 1152 c
151019 29 149190 -535 147115 -535 c
144357 -535 142023 447 140118 2411 c
138213 4374 137260 6738 137260 9490 c
137260 12377 138195 14758 140059 16639 c
141923 18527 144310 19468 147215 19468 c
150066 19468 152389 18486 154182 16528 c
155981 14564 156881 12012 156881 8872 c
156881 8702 L
@c
154194 10754 m
153735 12882 152889 14487 151660 15563 c
150431 16639 148832 17175 146856 17175 c
145022 17175 143463 16598 142188 15440 c
140912 14282 140136 12724 139847 10754 C
154194 10754 L
@c
F
T
@rax %Note: Object
108.97767 691.63625 156.31398 708.38107 @E
0 J 0 j [] 0 d 0 R 0 @G
0.00 0.00 0.00 1.00 K
0 0.50003 0.50003 0.00000 @w
/$fm 0 def
108.97767 708.38107 m
156.31398 708.38107 L
156.31398 691.63625 L
108.97767 691.63625 L
108.97767 708.38107 L
@c
S

@rax %Note: Object
251.60428 691.63625 298.94060 708.38107 @E
0 J 0 j [] 0 d 0 R 0 @G
0.00 0.00 0.00 1.00 K
0 0.50003 0.50003 0.00000 @w
/$fm 0 def
251.60428 708.38107 m
298.94060 708.38107 L
298.94060 691.63625 L
251.60428 691.63625 L
251.60428 708.38107 L
@c
S

@rax %Note: Object
156.26268 699.66085 251.57934 699.98287 @E
0 J 0 j [] 0 d 0 R 0 @G
0.00 0.00 0.00 1.00 K
0 1.00006 1.00006 0.00000 @w
/$fm 0 def
156.26268 699.98287 m
250.19858 699.66539 L
S
@j
0.00 0.00 0.00 1.00 K
0.00 0.00 0.00 1.00 k
0 @g
0 @G
[] 0 d 0 J 0 j
0 R 0 O
0 1.00800 1.00800 0 @w
247.01187 702.25483 m
250.98066 699.66283 L
246.99430 697.09578 L
S
@J

@rax %Note: Object
93.14759 699.98230 108.92636 699.98343 @E
0 J 0 j [] 0 d 0 R 0 @G
0.00 0.00 0.00 1.00 K
0 1.00006 1.00006 0.00000 @w
/$fm 0 def
93.14759 699.98287 m
107.54561 699.98287 L
S
@j
0.00 0.00 0.00 1.00 K
0.00 0.00 0.00 1.00 k
0 @g
0 @G
[] 0 d 0 J 0 j
0 R 0 O
0 1.00800 1.00800 0 @w
104.35011 702.56126 m
108.32769 699.98287 L
104.35011 697.40249 L
S
@J

%%PageTrailer
@rs
@rs
%%Trailer
@EndSysCorelDict
end
%%DocumentSuppliedResources: procset wCorel8Dict
%%EOF
