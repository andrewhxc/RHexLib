#
# This file is part of RHexLib,
#
# Copyright (c) 2001 The University of Michigan, its Regents,
# Fellows, Employees and Agents. All rights reserved, and distributed as
# free software under the following license.
#
#  Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1) Redistributions of source code must retain the above copyright
# notice, this list of conditions, the following disclaimer and the
# file called "CREDITS" which accompanies this distribution.
#
# 2) Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions, the following disclaimer and the file
# called "CREDITS" which accompanies this distribution in the
# documentation and/or other materials provided with the distribution.
#
# 3) Neither the name of the University of Michigan, Ann Arbor or the
# names of its contributors may be used to endorse or promote products
# derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

######################################################################
# $Id: hexaped.oogl,v 1.2 2001/07/12 17:14:10 ulucs Exp $
#
# The hexapod model implementation in SimSect
#
# This file is a sample Geomview geometry definition file for the
# hexapod model.
#
# Created       : Uluc Saranli, 12/17/1998
# Last Modified : Uluc Saranli, 06/27/2001
#
######################################################################

(progn
    (bbox-draw allgeoms no)
    (normalization allgeoms none)

    (geometry DsTool { LIST :platform_geom :hexaped_h :force_h :torque_h
                } )




    #(read geometry { define platform_geom {
    #        CMESH
    #        3 3
    #        -5.0 -5.0 0     0.0 0.0 0.5 1.0
    #        0.0 -5.0 0      0.0 0.0 0.5 1.0
    #        5.0 -5.0 0      0.0 0.0 0.5 1.0
    #        -5.0 0.0 0      0.0 0.0 0.5 1.0
    #        0.0 0.0 0   0.0 0.0 0.5 1.0
    #        5.0 0.0 0   0.0 0.0 0.5 1.0
    #        -5.0 5.0 0      0.0 0.0 0.5 1.0
    #        0.0 5.0 0   0.0 0.0 0.5 1.0
    #        5.0 5.0 0   0.0 0.0 0.5 1.0
    #        } }
    #    )

    # The following is the definition for the hexaped body.
    (read geometry { define body_geom {
        LIST
        { OFF
        8 6 12
        0.1 -0.2 -0.05
        0.1 0.2 -0.05
        0.1 0.2 0.05
        0.1 -0.2 0.05
        -0.1 -0.2 -0.05
        -0.1 0.2 -0.05
        -0.1 0.2 0.05
        -0.1 -0.2 0.05

        4 0 1 2 3   0.0 0.0 0.0 1.0
        4 4 5 6 7   0.0 0.0 0.0 1.0
        4 0 1 5 4   0.0 0.0 0.0 1.0
        4 1 2 6 5   0.0 0.0 0.0 1.0
        4 2 3 7 6   0.0 0.0 0.0 1.0
        4 3 0 4 7   0.0 0.0 0.0 1.0
        }
        { VECT
        6 16 1
        -4 -4 2 2 2 2
        1 0 0 0 0 0

        0.1 -0.2 0.05
        0.1 0.2 0.05
        -0.1 0.2 0.05
        -0.1 -0.2 0.05

        0.1 -0.2 -0.05
        0.1 0.2 -0.05
        -0.1 0.2 -0.05
        -0.1 -0.2 -0.05

        0.1 -0.2 0.05
        0.1 -0.2 -0.05

        0.1 0.2 0.05
        0.1 0.2 -0.05

        -0.1 0.2 0.05
        -0.1 0.2 -0.05

        -0.1 -0.2 0.05
        -0.1 -0.2 -0.05

        0.5 0.5 0.5 1.0
        } } }
    )


    (read geometry { define leg_geom {
            VECT
            1 2 1
            2   # The number of vertices
            1   # The number of colors used.

            0.0 0.0 0.0
            0.0 0.0 -0.2

            1.0 1.0 1.0 1.0 } }
        )

    # Then are the definition for the small ball to depict the feet
    # locations
    (read geometry { define foot_geom {
        SPHERE
        0.02 0 0 0 } }
    )

    # This is the collection of all transformation matrices that
    # Dstool is going to update during the simulation.
    (read transform { transform define ttt0
        # Transform for the body
        1 0 0 0
        0 1 0 0
        0 0 1 0
        0 0 0.2 1 }
    )

        # Transform for leg 0
    (read transform { transform define ttt1
        1 0 0 0
        0 1 0 0
        0 0 1 0
        0.1 -0.2 0 1 }
    )

        # Transform for leg 1
    (read transform { transform define ttt2
        1 0 0 0
        0 1 0 0
        0 0 1 0
        0.15 0 0 1 }
    )

        # Transform for leg 2
    (read transform { transform define ttt3
        1 0 0 0
        0 1 0 0
        0 0 1 0
        0.1 0.2 0 1 }
    )

        # Transform for leg 3
    (read transform { transform define ttt4
        1 0 0 0
        0 1 0 0
        0 0 1 0
        -0.1 0.2 0 1 }
    )

        # Transform for leg 4
    (read transform { transform define ttt5
        1 0 0 0
        0 1 0 0
        0 0 1 0
        -0.15 0 0 1 }
    )

        # Transform for leg 5
    (read transform { transform define ttt6
        1 0 0 0
        0 1 0 0
        0 0 1 0
        -0.1 -0.2 0 1 }
    )

        # Oops forgot to mention the transformation for
        # The arrowheads. The first one is force, the second
        # one is the torque vector
    ( read transform { transform define ttt7
        1 0 0 0
        0 1 0 0
        0 0 1 0
        0 0 0 1}
    )

    ( read transform { transform define ttt8
        1 0 0 0
        0 1 0 0
        0 0 1 0
        0 0 0 1}
    )

    # The following are the transforms for the feet balls
    ( read transform { transform define ttt9
        1 0 0 0
        0 1 0 0
        0 0 1 0
        0 0 -1 1}
    )
    ( read transform { transform define ttt10
        1 0 0 0
        0 1 0 0
        0 0 1 0
        0 0 -1 1}
    )
    ( read transform { transform define ttt11
        1 0 0 0
        0 1 0 0
        0 0 1 0
        0 0 -1 1}
    )
    ( read transform { transform define ttt12
        1 0 0 0
        0 1 0 0
        0 0 1 0
        0 0 -1 1}
    )
    ( read transform { transform define ttt13
        1 0 0 0
        0 1 0 0
        0 0 1 0
        0 0 -1 1}
    )
    ( read transform { transform define ttt14
        1 0 0 0
        0 1 0 0
        0 0 1 0
        0 0 -1 1}
    )
        # Finally, this is the transform for the camera
    (read transform { transform define ttt15
        1 0 0 0
        0 1 0 0
        0 0 1 0
        1.5 -2 1 1}
    )


    # Now, we instantiate the body with its transformation matrix
    (read geometry { define body_h {
        INST
            transform : ttt0
            geom :body_geom
        } }
    )

# The following commands will instatiate each leg
    # However, each leg has an intermediate object, which is
    # affected by the transformation matrix of the body, so that
    # we do not have to worry about the world coordinates for the legs.

    # Leg 0
    (read geometry { define leg0_preh {
        INST
            transform : ttt1
            geom :leg_geom
        } }
    )

    (read geometry { define leg0_h {
        INST
            transform : ttt0
            geom :leg0_preh
        } }
    )

    # Leg 1
    (read geometry { define leg1_preh {
        INST
            transform : ttt2
            geom :leg_geom
        } }
    )

    (read geometry { define leg1_h {
        INST
            transform : ttt0
            geom :leg1_preh
        } }
    )

    # Leg 2
    (read geometry { define leg2_preh {
        INST
            transform : ttt3
            geom :leg_geom
        } }
    )

    (read geometry { define leg2_h {
        INST
            transform : ttt0
            geom :leg2_preh
        } }
    )

    # Leg 3
    (read geometry { define leg3_preh {
        INST
            transform : ttt4
            geom :leg_geom
        } }
    )

    (read geometry { define leg3_h {
        INST
            transform : ttt0
            geom :leg3_preh
        } }
    )

    # Leg 4
    (read geometry { define leg4_preh {
        INST
            transform : ttt5
            geom :leg_geom
        } }
    )

    (read geometry { define leg4_h {
        INST
            transform : ttt0
            geom :leg4_preh
        } }
    )

    # Leg 5
    (read geometry { define leg5_preh {
        INST
            transform : ttt6
            geom :leg_geom
        } }
    )

    (read geometry { define leg5_h {
        INST
            transform : ttt0
            geom :leg5_preh
        } }
    )

    (read geometry { define foot1_h {
        INST
            transform :ttt9
            geom :foot_geom
        } }
    )
    (read geometry { define foot2_h {
        INST
            transform :ttt10
            geom :foot_geom
        } }
    )
    (read geometry { define foot3_h {
        INST
            transform :ttt11
            geom :foot_geom
        } }
    )
    (read geometry { define foot4_h {
        INST
            transform :ttt12
            geom :foot_geom
        } }
    )
    (read geometry { define foot5_h {
        INST
            transform :ttt13
            geom :foot_geom
        } }
    )
    (read geometry { define foot6_h {
        INST
            transform :ttt14
            geom :foot_geom
        } }
    )

    (read geometry { define hexaped_h {
        LIST
        :body_h
        :leg0_h
        :leg1_h
        :leg2_h
        :leg3_h
        :leg4_h
        :leg5_h
        :foot1_h
        :foot2_h
        :foot3_h
        :foot4_h
        :foot5_h
        :foot6_h } }
    )

    (look-toward World Camera origin)
    (transform Camera Camera Camera rotate 0 0 0.62)
)
